# Generated by Django 5.2 on 2025-05-28 11:55

import django.contrib.postgres.constraints
import django.contrib.postgres.fields.ranges
import django.contrib.postgres.indexes
import django.db.models.deletion
from django.db import migrations, models
from django.contrib.postgres.operations import BtreeGistExtension

class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        BtreeGistExtension(),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('address', models.TextField(blank=True)),
                ('site', models.URLField(blank=True)),
                ('max_capacity', models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('surname', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CapacityWindow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timerange', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, null=True)),
                ('capacity', models.PositiveIntegerField()),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capacity_windows', to='easybook.resource')),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GistIndex(fields=['timerange'], name='easybook_ca_timeran_5fe546_gist')],
                'constraints': [django.contrib.postgres.constraints.ExclusionConstraint(expressions=(('resource', '='), ('timerange', '&&')), name='prevent_capacity_windows_overlap')],
            },
        ),
        migrations.CreateModel(
            name='AvailabilityRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('specific_date', models.DateField(blank=True, null=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('slot_size', models.PositiveIntegerField(blank=True, null=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_rules', to='easybook.resource')),
            ],
            options={
                'indexes': [models.Index(fields=['weekday'], name='easybook_av_weekday_c3774d_idx'), models.Index(fields=['specific_date'], name='easybook_av_specifi_284c21_idx')],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timerange', django.contrib.postgres.fields.ranges.DateTimeRangeField(blank=True, null=True)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='easybook.resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='easybook.user')),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GistIndex(fields=['timerange'], name='easybook_bo_timeran_caa26e_gist')],
                'constraints': [django.contrib.postgres.constraints.ExclusionConstraint(expressions=(('user', '='), ('resource', '='), ('timerange', '&&')), name='prevent_overlap_for_the_same_user')],
            },
        ),
    ]
